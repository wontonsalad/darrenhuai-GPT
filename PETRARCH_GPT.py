{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMOW+w922zX2kEcSS9CFENB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/wontonsalad/darrenhuai-GPT/blob/main/PETRARCH_GPT.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "_ZMAAxPW4JwL",
        "outputId": "ae2b4579-5eea-423d-ed7d-c89dd79ea135"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: 'input.txt'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2-3776181705.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;31m# urllib.request.urlretrieve(url, \"input.txt\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'input.txt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m     \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'input.txt'"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.nn import functional as F\n",
        "\n",
        "# ── configuration ──────────────────────────────────────────────────────────────\n",
        "batch_size    = 64      # sequences processed in parallel\n",
        "block_size    = 256     # longest context window (tokens)\n",
        "max_iters     = 5000    # optimisation steps\n",
        "eval_interval = 500     # validate every N iterations\n",
        "learning_rate = 3e-4    # AdamW step size\n",
        "device        = 'cuda' if torch.cuda.is_available() else 'cpu' # uses my local RTX 4070\n",
        "eval_iters    = 200     # batches to average when estimating loss\n",
        "n_embd        = 384     # embedding width\n",
        "n_head        = 6       # attention heads per block\n",
        "n_layer       = 6       # transformer blocks\n",
        "dropout       = 0.2     # dropout probability\n",
        "# ───────────────────────────────────────────────────────────────────────────────\n",
        "\n",
        "torch.manual_seed(1337)\n",
        "\n",
        "# Petrarchan corpus (download with: wget …/input.txt)\n",
        "# ex: !wget https://github.com/wontonsalad/darrenhuai-GPT/blob/main/input.txt\n",
        "# keeps script runnalbe everywhere, wget in terminal, !get in notebook cell,\n",
        "# for python import:\n",
        "# urllib.request\n",
        "# url = https://github.com/wontonsalad/darrenhuai-GPT/blob/main/input.txt\n",
        "# urllib.request.urlretrieve(url, \"input.txt\")\n",
        "\n",
        "with open('input.txt', 'r', encoding='utf-8') as f:\n",
        "    text = f.read()\n",
        "# creates file object for input.txt in read only using decoding bytes as UTF-8 characters, wraps in context maanger and reads it as string text\n",
        "# build vocabulary\n",
        "chars       = sorted(set(text))                  # distinct characters\n",
        "vocab_size  = len(chars)\n",
        "stoi        = {ch: i for i, ch in enumerate(chars)}  # char → id\n",
        "itos        = {i: ch for i, ch in enumerate(chars)}  # id  → char\n",
        "encode      = lambda s: [stoi[c] for c in s]         # text → list[int]\n",
        "decode      = lambda l: ''.join(itos[i] for i in l)  # list[int] → text\n",
        "\n",
        "# 90 % train / 10 % validation split\n",
        "data       = torch.tensor(encode(text), dtype=torch.long)\n",
        "n          = int(0.9 * len(data))\n",
        "train_data = data[:n]\n",
        "val_data   = data[n:]\n",
        "\n",
        "# ── batch loader ───────────────────────────────────────────────────────────────\n",
        "def get_batch(split: str):\n",
        "    #Return a mini‑batch (X, Y) with Y = X shifted by one token.\n",
        "    src = train_data if split == 'train' else val_data\n",
        "    idx = torch.randint(len(src) - block_size, (batch_size,))\n",
        "    x   = torch.stack([src[i     : i + block_size]     for i in idx])\n",
        "    y   = torch.stack([src[i + 1 : i + block_size + 1] for i in idx])\n",
        "    return x.to(device), y.to(device)\n",
        "\n",
        "@torch.no_grad()\n",
        "def estimate_loss():\n",
        "   #Average loss over eval_iters for train/val sets.\n",
        "    model.eval()\n",
        "    out = {}\n",
        "    for split in ('train', 'val'):\n",
        "        losses = torch.zeros(eval_iters)\n",
        "        for k in range(eval_iters):\n",
        "            X, Y       = get_batch(split)\n",
        "            _, loss    = model(X, Y)\n",
        "            losses[k]  = loss.item()\n",
        "        out[split] = losses.mean()\n",
        "    model.train()\n",
        "    return out\n",
        "\n",
        "# ── model components ───────────────────────────────────────────────────────────\n",
        "class Head(nn.Module):\n",
        "    #Single causal self‑attention head.\n",
        "\n",
        "    def __init__(self, head_size: int):\n",
        "        super().__init__()\n",
        "        self.key   = nn.Linear(n_embd, head_size, bias=False)\n",
        "        self.query = nn.Linear(n_embd, head_size, bias=False)\n",
        "        self.value = nn.Linear(n_embd, head_size, bias=False)\n",
        "        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))\n",
        "        self.dropout = nn.Dropout(dropout)\n",
        "\n",
        "    def forward(self, x):\n",
        "        B, T, C = x.shape                         # (batch, time, channel)\n",
        "        k = self.key(x)                           # keys   (B,T,hs)\n",
        "        q = self.query(x)                         # queries (B,T,hs)\n",
        "\n",
        "        # scaled dot‑product attention with causal mask\n",
        "        wei = q @ k.transpose(-2, -1) * k.shape[-1] ** -0.5   # (B,T,T)\n",
        "        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf'))\n",
        "        wei = F.softmax(wei, dim=-1)\n",
        "        wei = self.dropout(wei)\n",
        "\n",
        "        v   = self.value(x)                       # values (B,T,hs)\n",
        "        out = wei @ v                             # aggregation (B,T,hs)\n",
        "        return out\n",
        "\n",
        "class MultiHeadAttention(nn.Module):\n",
        "    #Apply several attention heads in parallel and concatenate.\n",
        "\n",
        "    def __init__(self, num_heads: int, head_size: int):\n",
        "        super().__init__()\n",
        "        self.heads  = nn.ModuleList(Head(head_size) for _ in range(num_heads))\n",
        "        self.proj   = nn.Linear(head_size * num_heads, n_embd)\n",
        "        self.dropout = nn.Dropout(dropout)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = torch.cat([h(x) for h in self.heads], dim=-1)  # merge heads\n",
        "        return self.dropout(self.proj(x))\n",
        "\n",
        "class FeedFoward(nn.Module):\n",
        "    #Two‑layer MLP with ReLU and dropout.\n",
        "\n",
        "    def __init__(self, n_embd: int):\n",
        "        super().__init__()\n",
        "        self.net = nn.Sequential(\n",
        "            nn.Linear(n_embd, 4 * n_embd),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(4 * n_embd, n_embd),\n",
        "            nn.Dropout(dropout),\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.net(x)\n",
        "\n",
        "class Block(nn.Module):\n",
        "    #Transformer block = attention + feed‑forward, each with residual + norm.\n",
        "    def __init__(self, n_embd: int, n_head: int):\n",
        "        super().__init__()\n",
        "        head_size = n_embd // n_head\n",
        "        self.sa   = MultiHeadAttention(n_head, head_size)\n",
        "        self.ffwd = FeedFoward(n_embd)\n",
        "        self.ln1  = nn.LayerNorm(n_embd)\n",
        "        self.ln2  = nn.LayerNorm(n_embd)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x + self.sa(self.ln1(x))  # attention\n",
        "        x = x + self.ffwd(self.ln2(x))  # MLP\n",
        "        return x\n",
        "\n",
        "# ── GPT‑style language model ───────────────────────────────────────────────────\n",
        "class GPTLanguageModel(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.token_embedding_table    = nn.Embedding(vocab_size, n_embd)\n",
        "        self.position_embedding_table = nn.Embedding(block_size, n_embd)\n",
        "        self.blocks = nn.Sequential(*(Block(n_embd, n_head) for _ in range(n_layer)))\n",
        "        self.ln_f   = nn.LayerNorm(n_embd)            # final norm\n",
        "        self.lm_head = nn.Linear(n_embd, vocab_size)\n",
        "\n",
        "        # initialise weights (better than PyTorch defaults for language models)\n",
        "        self.apply(self._init_weights)\n",
        "\n",
        "    def _init_weights(self, module):\n",
        "        if isinstance(module, nn.Linear):\n",
        "            nn.init.normal_(module.weight, mean=0.0, std=0.02)\n",
        "            if module.bias is not None:\n",
        "                nn.init.zeros_(module.bias)\n",
        "        elif isinstance(module, nn.Embedding):\n",
        "            nn.init.normal_(module.weight, mean=0.0, std=0.02)\n",
        "\n",
        "    def forward(self, idx, targets=None):\n",
        "        B, T = idx.shape\n",
        "\n",
        "        tok_emb = self.token_embedding_table(idx)               # (B,T,C)\n",
        "        pos_emb = self.position_embedding_table(torch.arange(T, device=device))\n",
        "        x = tok_emb + pos_emb                                   # add positional info\n",
        "        x = self.blocks(x)                                      # (B,T,C)\n",
        "        x = self.ln_f(x)                                        # layer‑norm\n",
        "        logits = self.lm_head(x)                                # (B,T,vocab)\n",
        "\n",
        "        loss = None\n",
        "        if targets is not None:\n",
        "            logits  = logits.view(-1, logits.size(-1))\n",
        "            targets = targets.view(-1)\n",
        "            loss    = F.cross_entropy(logits, targets)\n",
        "\n",
        "        return logits, loss\n",
        "\n",
        "    def generate(self, idx, max_new_tokens: int):\n",
        "        #Autoregressively sample tokens after the given context.\n",
        "        for _ in range(max_new_tokens):\n",
        "            idx_cond = idx[:, -block_size:]             # last block_size tokens\n",
        "            logits, _ = self(idx_cond)\n",
        "            logits    = logits[:, -1, :]                # next‑token logits\n",
        "            probs     = F.softmax(logits, dim=-1)\n",
        "            idx_next  = torch.multinomial(probs, num_samples=1)\n",
        "            idx       = torch.cat((idx, idx_next), dim=1)\n",
        "        return idx\n",
        "\n",
        "# ── training setup ─────────────────────────────────────────────────────────────\n",
        "model = GPTLanguageModel().to(device)\n",
        "print(sum(p.numel() for p in model.parameters()) / 1e6, 'M parameters')  # parameter count\n",
        "\n",
        "optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\n",
        "\n",
        "# ── training loop ──────────────────────────────────────────────────────────────\n",
        "for iter in range(max_iters):\n",
        "\n",
        "    # periodic evaluation\n",
        "    if iter % eval_interval == 0 or iter == max_iters - 1:\n",
        "        losses = estimate_loss()\n",
        "        print(f\"step {iter}: train loss {losses['train']:.4f}, \"\n",
        "              f\"val loss {losses['val']:.4f}\")\n",
        "\n",
        "    xb, yb       = get_batch('train')\n",
        "    _,  loss     = model(xb, yb)\n",
        "    optimizer.zero_grad(set_to_none=True)\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "# ── text generation ────────────────────────────────────────────────────────────\n",
        "context = torch.zeros((1, 1), dtype=torch.long, device=device)\n",
        "print(decode(model.generate(context, max_new_tokens=500)[0].tolist()))\n",
        "# open('more.txt', 'w').write(decode(model.generate(context, 10000)[0].tolist()))\n"
      ]
    }
  ]
}