import torch
import torch.nn as nn
from torch.nn import functional as F

# ── configuration ──────────────────────────────────────────────────────────────
batch_size    = 64      # sequences processed in parallel
block_size    = 256     # longest context window (tokens)
max_iters     = 5000    # optimisation steps
eval_interval = 500     # validate every N iterations
learning_rate = 3e-4    # AdamW step size
device        = 'cuda' if torch.cuda.is_available() else 'cpu' # uses my local RTX 4070
eval_iters    = 200     # batches to average when estimating loss
n_embd        = 384     # embedding width
n_head        = 6       # attention heads per block
n_layer       = 6       # transformer blocks
dropout       = 0.2     # dropout probability
# ───────────────────────────────────────────────────────────────────────────────

torch.manual_seed(1337)

# Petrarchan corpus (download with: wget …/input.txt)
# ex: !wget https://github.com/wontonsalad/darrenhuai-GPT/blob/main/input.txt
# keeps script runnalbe everywhere, wget in terminal, !get in notebook cell,
# for python import:
# urllib.request
# url = https://github.com/wontonsalad/darrenhuai-GPT/blob/main/input.txt
# urllib.request.urlretrieve(url, "input.txt")

with open('input.txt', 'r', encoding='utf-8') as f:
    text = f.read()
# creates file object for input.txt in read only using decoding bytes as UTF-8 characters, wraps in context maanger and reads it as string text
# build vocabulary
chars       = sorted(set(text))                  # distinct characters
vocab_size  = len(chars)
stoi        = {ch: i for i, ch in enumerate(chars)}  # char → id
itos        = {i: ch for i, ch in enumerate(chars)}  # id  → char
encode      = lambda s: [stoi[c] for c in s]         # text → list[int]
decode      = lambda l: ''.join(itos[i] for i in l)  # list[int] → text

# 90 % train / 10 % validation split
data       = torch.tensor(encode(text), dtype=torch.long)
n          = int(0.9 * len(data))
train_data = data[:n]
val_data   = data[n:]

# ── batch loader ───────────────────────────────────────────────────────────────
def get_batch(split: str):
    #Return a mini‑batch (X, Y) with Y = X shifted by one token.
    src = train_data if split == 'train' else val_data
    idx = torch.randint(len(src) - block_size, (batch_size,))
    x   = torch.stack([src[i     : i + block_size]     for i in idx])
    y   = torch.stack([src[i + 1 : i + block_size + 1] for i in idx])
    return x.to(device), y.to(device)

@torch.no_grad()
def estimate_loss():
   #Average loss over eval_iters for train/val sets.
    model.eval()
    out = {}
    for split in ('train', 'val'):
        losses = torch.zeros(eval_iters)
        for k in range(eval_iters):
            X, Y       = get_batch(split)
            _, loss    = model(X, Y)
            losses[k]  = loss.item()
        out[split] = losses.mean()
    model.train()
    return out

# ── model components ───────────────────────────────────────────────────────────
class Head(nn.Module):
    #Single causal self‑attention head.

    def __init__(self, head_size: int):
        super().__init__()
        self.key   = nn.Linear(n_embd, head_size, bias=False)
        self.query = nn.Linear(n_embd, head_size, bias=False)
        self.value = nn.Linear(n_embd, head_size, bias=False)
        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        B, T, C = x.shape                         # (batch, time, channel)
        k = self.key(x)                           # keys   (B,T,hs)
        q = self.query(x)                         # queries (B,T,hs)

        # scaled dot‑product attention with causal mask
        wei = q @ k.transpose(-2, -1) * k.shape[-1] ** -0.5   # (B,T,T)
        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf'))
        wei = F.softmax(wei, dim=-1)
        wei = self.dropout(wei)

        v   = self.value(x)                       # values (B,T,hs)
        out = wei @ v                             # aggregation (B,T,hs)
        return out

class MultiHeadAttention(nn.Module):
    #Apply several attention heads in parallel and concatenate.

    def __init__(self, num_heads: int, head_size: int):
        super().__init__()
        self.heads  = nn.ModuleList(Head(head_size) for _ in range(num_heads))
        self.proj   = nn.Linear(head_size * num_heads, n_embd)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        x = torch.cat([h(x) for h in self.heads], dim=-1)  # merge heads
        return self.dropout(self.proj(x))

class FeedFoward(nn.Module):
    #Two‑layer MLP with ReLU and dropout.

    def __init__(self, n_embd: int):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(n_embd, 4 * n_embd),
            nn.ReLU(),
            nn.Linear(4 * n_embd, n_embd),
            nn.Dropout(dropout),
        )

    def forward(self, x):
        return self.net(x)

class Block(nn.Module):
    #Transformer block = attention + feed‑forward, each with residual + norm.
    def __init__(self, n_embd: int, n_head: int):
        super().__init__()
        head_size = n_embd // n_head
        self.sa   = MultiHeadAttention(n_head, head_size)
        self.ffwd = FeedFoward(n_embd)
        self.ln1  = nn.LayerNorm(n_embd)
        self.ln2  = nn.LayerNorm(n_embd)

    def forward(self, x):
        x = x + self.sa(self.ln1(x))  # attention
        x = x + self.ffwd(self.ln2(x))  # MLP
        return x

# ── GPT‑style language model ───────────────────────────────────────────────────
class GPTLanguageModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.token_embedding_table    = nn.Embedding(vocab_size, n_embd)
        self.position_embedding_table = nn.Embedding(block_size, n_embd)
        self.blocks = nn.Sequential(*(Block(n_embd, n_head) for _ in range(n_layer)))
        self.ln_f   = nn.LayerNorm(n_embd)            # final norm
        self.lm_head = nn.Linear(n_embd, vocab_size)

        # initialise weights (better than PyTorch defaults for language models)
        self.apply(self._init_weights)

    def _init_weights(self, module):
        if isinstance(module, nn.Linear):
            nn.init.normal_(module.weight, mean=0.0, std=0.02)
            if module.bias is not None:
                nn.init.zeros_(module.bias)
        elif isinstance(module, nn.Embedding):
            nn.init.normal_(module.weight, mean=0.0, std=0.02)

    def forward(self, idx, targets=None):
        B, T = idx.shape

        tok_emb = self.token_embedding_table(idx)               # (B,T,C)
        pos_emb = self.position_embedding_table(torch.arange(T, device=device))
        x = tok_emb + pos_emb                                   # add positional info
        x = self.blocks(x)                                      # (B,T,C)
        x = self.ln_f(x)                                        # layer‑norm
        logits = self.lm_head(x)                                # (B,T,vocab)

        loss = None
        if targets is not None:
            logits  = logits.view(-1, logits.size(-1))
            targets = targets.view(-1)
            loss    = F.cross_entropy(logits, targets)

        return logits, loss

    def generate(self, idx, max_new_tokens: int):
        #Autoregressively sample tokens after the given context.
        for _ in range(max_new_tokens):
            idx_cond = idx[:, -block_size:]             # last block_size tokens
            logits, _ = self(idx_cond)
            logits    = logits[:, -1, :]                # next‑token logits
            probs     = F.softmax(logits, dim=-1)
            idx_next  = torch.multinomial(probs, num_samples=1)
            idx       = torch.cat((idx, idx_next), dim=1)
        return idx

# ── training setup ─────────────────────────────────────────────────────────────
model = GPTLanguageModel().to(device)
print(sum(p.numel() for p in model.parameters()) / 1e6, 'M parameters')  # parameter count

optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)

# ── training loop ──────────────────────────────────────────────────────────────
for iter in range(max_iters):

    # periodic evaluation
    if iter % eval_interval == 0 or iter == max_iters - 1:
        losses = estimate_loss()
        print(f"step {iter}: train loss {losses['train']:.4f}, "
              f"val loss {losses['val']:.4f}")

    xb, yb       = get_batch('train')
    _,  loss     = model(xb, yb)
    optimizer.zero_grad(set_to_none=True)
    loss.backward()
    optimizer.step()

# ── text generation ────────────────────────────────────────────────────────────
context = torch.zeros((1, 1), dtype=torch.long, device=device)
print(decode(model.generate(context, max_new_tokens=500)[0].tolist()))
# open('more.txt', 'w').write(decode(model.generate(context, 10000)[0].tolist()))
