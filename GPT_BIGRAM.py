{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMDgPOz7BkoqjeqVn4/6/Gt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/wontonsalad/darrenhuai-GPT/blob/main/GPT_BIGRAM.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "WkCFzeMAaGon",
        "outputId": "a3279e52-989e-4933-9722-bbd2254cb772",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: 'input.txt'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1-3488875262.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;31m# url = https://github.com/wontonsalad/darrenhuai-GPT/blob/main/input.txt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m# urllib.request.urlretrieve(url, \"input.txt\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'input.txt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m     \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'input.txt'"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.nn import functional as F\n",
        "\n",
        "# ── configuration ──────────────────────────────────────────────────────────────\n",
        "batch_size    = 32      # number of sequences processed concurrently\n",
        "block_size    = 8       # longest context length (tokens) the model attends to\n",
        "max_iters     = 3000    # total optimisation steps\n",
        "eval_interval = 300     # compute validation stats every this many iterations\n",
        "learning_rate = 1e-2    # AdamW step size\n",
        "device        = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
        "eval_iters    = 200     # batches over which to average loss estimates\n",
        "# ───────────────────────────────────────────────────────────────────────────────\n",
        "\n",
        "torch.manual_seed(1337)\n",
        "\n",
        "# Petrarchan corpus (download with: wget …/input.txt)\n",
        "# ex: !wget https://github.com/wontonsalad/darrenhuai-GPT/blob/main/input.txt\n",
        "# keeps script runnalbe everywhere, wget in terminal, !get in notebook cell,\n",
        "# for python import:\n",
        "# urllib.request\n",
        "# url = https://github.com/wontonsalad/darrenhuai-GPT/blob/main/input.txt\n",
        "# urllib.request.urlretrieve(url, \"input.txt\")\n",
        "with open('input.txt', 'r', encoding='utf-8') as f:\n",
        "    text = f.read()\n",
        "# creates file object for input.txt in read only using decoding bytes as UTF-8 characters, wraps in context maanger and reads it as string text\n",
        "# derive vocabulary\n",
        "chars       = sorted(set(text))                  # unique characters in corpus\n",
        "vocab_size  = len(chars)\n",
        "stoi        = {ch: i for i, ch in enumerate(chars)}  # char → index\n",
        "itos        = {i: ch for i, ch in enumerate(chars)}  # index → char\n",
        "encode      = lambda s: [stoi[c] for c in s]         # string → list[int]\n",
        "decode      = lambda l: ''.join(itos[i] for i in l)  # list[int] → string\n",
        "\n",
        "# split 90 % train / 10 % validation\n",
        "data       = torch.tensor(encode(text), dtype=torch.long)\n",
        "n          = int(0.9 * len(data))\n",
        "train_data = data[:n]\n",
        "val_data   = data[n:]\n",
        "\n",
        "# ── batch loader ───────────────────────────────────────────────────────────────\n",
        "def get_batch(split: str):\n",
        "    #Return a mini‑batch (X, Y) where Y is X shifted by one token.\n",
        "    src = train_data if split == 'train' else val_data\n",
        "    idx = torch.randint(len(src) - block_size, (batch_size,))\n",
        "    x   = torch.stack([src[i : i + block_size]     for i in idx])\n",
        "    y   = torch.stack([src[i + 1 : i + block_size + 1] for i in idx])\n",
        "    return x.to(device), y.to(device)\n",
        "\n",
        "@torch.no_grad()\n",
        "def estimate_loss():\n",
        "   #Estimate mean loss on train and validation sets.\n",
        "    model.eval()\n",
        "    out = {}\n",
        "    for split in ('train', 'val'):\n",
        "        losses = torch.zeros(eval_iters)\n",
        "        for k in range(eval_iters):\n",
        "            X, Y       = get_batch(split)\n",
        "            _, loss    = model(X, Y)\n",
        "            losses[k]  = loss.item()\n",
        "        out[split] = losses.mean()\n",
        "    model.train()\n",
        "    return out\n",
        "\n",
        "# ── minimal bigram language model ──────────────────────────────────────────────\n",
        "class BigramLanguageModel(nn.Module):\n",
        "    def __init__(self, vocab_size: int):\n",
        "        super().__init__()\n",
        "        # embedding table already stores logits for every possible next token\n",
        "        self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)\n",
        "\n",
        "    def forward(self, idx, targets=None):\n",
        "        # idx, targets: (B, T) integer tensors\n",
        "        logits = self.token_embedding_table(idx)        # (B, T, C)\n",
        "\n",
        "        loss = None\n",
        "        if targets is not None:\n",
        "            B, T, C = logits.shape\n",
        "            logits  = logits.view(B * T, C)\n",
        "            targets = targets.view(B * T)\n",
        "            loss    = F.cross_entropy(logits, targets)\n",
        "\n",
        "        return logits, loss\n",
        "\n",
        "    def generate(self, idx, max_new_tokens: int):\n",
        "        # Autoregressively sample max_new_tokens after idx.\n",
        "        for _ in range(max_new_tokens):\n",
        "            logits, _ = self(idx)           # (B, T, C)\n",
        "            logits    = logits[:, -1, :]    # keep only last step (B, C)\n",
        "            probs     = F.softmax(logits, dim=-1)  # convert to probabilities\n",
        "            idx_next  = torch.multinomial(probs, num_samples=1)  # (B, 1)\n",
        "            idx       = torch.cat((idx, idx_next), dim=1)        # append token\n",
        "        return idx\n",
        "\n",
        "# model / optimiser\n",
        "# Bigramlangugage model, nn.embedding lookup table\n",
        "model     = BigramLanguageModel(vocab_size).to(device)\n",
        "optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\n",
        "# adamw has fast convergaence, proper weight decay, and minimal tuning effort\n",
        "# ── training loop ──────────────────────────────────────────────────────────────\n",
        "for iter in range(max_iters):\n",
        "\n",
        "    # periodic evaluation\n",
        "    if iter % eval_interval == 0:\n",
        "        losses = estimate_loss()\n",
        "        print(f\"step {iter}: train loss {losses['train']:.4f}, \"\n",
        "              f\"val loss {losses['val']:.4f}\")\n",
        "\n",
        "    xb, yb          = get_batch('train')        # fetch a batch\n",
        "    _,  loss        = model(xb, yb)             # forward & loss\n",
        "    optimizer.zero_grad(set_to_none=True)\n",
        "    loss.backward()                             # back‑prop\n",
        "    optimizer.step()                            # parameter update\n",
        "\n",
        "# ── text generation ────────────────────────────────────────────────────────────\n",
        "start = torch.zeros((1, 1), dtype=torch.long, device=device)\n",
        "print(decode(model.generate(start, max_new_tokens=500)[0].tolist()))\n"
      ]
    }
  ]
}