import torch
import torch.nn as nn
from torch.nn import functional as F

# ── configuration ──────────────────────────────────────────────────────────────
batch_size    = 32      # number of sequences processed concurrently
block_size    = 8       # longest context length (tokens) the model attends to
max_iters     = 3000    # total optimisation steps
eval_interval = 300     # compute validation stats every this many iterations
learning_rate = 1e-2    # AdamW step size
device        = 'cuda' if torch.cuda.is_available() else 'cpu'
eval_iters    = 200     # batches over which to average loss estimates
# ───────────────────────────────────────────────────────────────────────────────

torch.manual_seed(1337)

# Petrarchan corpus (download with: wget …/input.txt)
# ex: !wget https://github.com/wontonsalad/darrenhuai-GPT/blob/main/input.txt
# keeps script runnalbe everywhere, wget in terminal, !get in notebook cell,
# for python import:
# urllib.request
# url = https://github.com/wontonsalad/darrenhuai-GPT/blob/main/input.txt
# urllib.request.urlretrieve(url, "input.txt")
with open('input.txt', 'r', encoding='utf-8') as f:
    text = f.read()
# creates file object for input.txt in read only using decoding bytes as UTF-8 characters, wraps in context maanger and reads it as string text
# derive vocabulary
chars       = sorted(set(text))                  # unique characters in corpus
vocab_size  = len(chars)
stoi        = {ch: i for i, ch in enumerate(chars)}  # char → index
itos        = {i: ch for i, ch in enumerate(chars)}  # index → char
encode      = lambda s: [stoi[c] for c in s]         # string → list[int]
decode      = lambda l: ''.join(itos[i] for i in l)  # list[int] → string

# split 90 % train / 10 % validation
data       = torch.tensor(encode(text), dtype=torch.long)
n          = int(0.9 * len(data))
train_data = data[:n]
val_data   = data[n:]

# ── batch loader ───────────────────────────────────────────────────────────────
def get_batch(split: str):
    #Return a mini‑batch (X, Y) where Y is X shifted by one token.
    src = train_data if split == 'train' else val_data
    idx = torch.randint(len(src) - block_size, (batch_size,))
    x   = torch.stack([src[i : i + block_size]     for i in idx])
    y   = torch.stack([src[i + 1 : i + block_size + 1] for i in idx])
    return x.to(device), y.to(device)

@torch.no_grad()
def estimate_loss():
   #Estimate mean loss on train and validation sets.
    model.eval()
    out = {}
    for split in ('train', 'val'):
        losses = torch.zeros(eval_iters)
        for k in range(eval_iters):
            X, Y       = get_batch(split)
            _, loss    = model(X, Y)
            losses[k]  = loss.item()
        out[split] = losses.mean()
    model.train()
    return out

# ── minimal bigram language model ──────────────────────────────────────────────
class BigramLanguageModel(nn.Module):
    def __init__(self, vocab_size: int):
        super().__init__()
        # embedding table already stores logits for every possible next token
        self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)

    def forward(self, idx, targets=None):
        # idx, targets: (B, T) integer tensors
        logits = self.token_embedding_table(idx)        # (B, T, C)

        loss = None
        if targets is not None:
            B, T, C = logits.shape
            logits  = logits.view(B * T, C)
            targets = targets.view(B * T)
            loss    = F.cross_entropy(logits, targets)

        return logits, loss

    def generate(self, idx, max_new_tokens: int):
        # Autoregressively sample max_new_tokens after idx.
        for _ in range(max_new_tokens):
            logits, _ = self(idx)           # (B, T, C)
            logits    = logits[:, -1, :]    # keep only last step (B, C)
            probs     = F.softmax(logits, dim=-1)  # convert to probabilities
            idx_next  = torch.multinomial(probs, num_samples=1)  # (B, 1)
            idx       = torch.cat((idx, idx_next), dim=1)        # append token
        return idx

# model / optimiser
# Bigramlangugage model, nn.embedding lookup table
model     = BigramLanguageModel(vocab_size).to(device)
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)
# adamw has fast convergaence, proper weight decay, and minimal tuning effort
# ── training loop ──────────────────────────────────────────────────────────────
for iter in range(max_iters):

    # periodic evaluation
    if iter % eval_interval == 0:
        losses = estimate_loss()
        print(f"step {iter}: train loss {losses['train']:.4f}, "
              f"val loss {losses['val']:.4f}")

    xb, yb          = get_batch('train')        # fetch a batch
    _,  loss        = model(xb, yb)             # forward & loss
    optimizer.zero_grad(set_to_none=True)
    loss.backward()                             # back‑prop
    optimizer.step()                            # parameter update

# ── text generation ────────────────────────────────────────────────────────────
start = torch.zeros((1, 1), dtype=torch.long, device=device)
print(decode(model.generate(start, max_new_tokens=500)[0].tolist()))
